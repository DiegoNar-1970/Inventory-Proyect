###############!!!-----code errors-------!!!###################
y codigo para optimizar y mejorar 
git log --graph --decorate --all --oneline
$ git reflog
controllerWorkHour
i cant be a feedback
        const {id}=req.params;
        const result= req.body;;
        if(!result || !id){
            return res.status(400).json({message:'insufficient params'})
        }
        try{
            const newWorkH =await WorkHourModel.create(id,result.data)
            console.log(newWorkH);
            const saveNewWork=newWorkH.save();
            return res.send(saveNewWork), mongoose.connection.close();

        }catch(err){
            return res.status(400).json({message:err})            
        }
        
        
        static async create(req,res){
        const { id } = req.params;
    const result = req.body;
    if (!result || !id) {
      return res.status(400).json({ message: 'insufficient params' });
    }
    try {
      const newWorkH = await WorkHourModel.create(id, result);
      if (newWorkH.message) {
        return res.status(400).json({ message: newWorkH.message,
            error:newWorkH.error
         });
      }
      return res.status(201).json(newWorkH);
    } catch (err) {
      return res.status(400).json({ message: err.message });
    }
    }
    Zod from workHour 
    // import z from "zod";
    import z from "zod";

const holidaySchema = z.object({
  isHoliday: z.boolean(),
  holidayNumber: z.number()
});

const workHourSchemaZod = z.object({
    employee: z.object().optional(),
    week: z.number(),
    dayHour: z.number().min(0).max(24).optional(),
    date:z.date().optional(),
    holiday:z.array(holidaySchema).optional
  });

  export function vWorkHourSchemaZod (input) {
    return workHourSchemaZod.safeParse(input)
  }
  
  export function vPworkHourSchemaZod (input) {
    return workHourSchemaZod.partial().safeParse(input)
  }



const holidaySchema = z.object({
  isHoliday: z.boolean(),
  holidayNumber: z.number()
});

const workHourSchemaZod = z.object({
  employee: z.string().optional(),
  dayHour: z.number().min(0).max(24).optional(),
  date: z.date().optional(),
  holiday: z.array(holidaySchema).optional()
});

export function vWorkHourSchemaZod(input) {
  return workHourSchemaZod.safeParse(input);
}

export function vPworkHourSchemaZod(input) {
  return workHourSchemaZod.partial().safeParse(input);
}
worHourModel

      const result= await vWorkHourSchemaZod(data);
        console.log(result.error.message);
        if(!result.success){
          console.log(result.err,result);
            return {message:result.error.message}
        }
      try{
        const newWorkH = await new WorkHour(data);
        const employee = await Employee.findById(id);
        newWorkH.employee=newWorkH.employee.concat(employee);
        return newWorkH
      }catch(err){
        return {message:err}
      }


        export class WorkHourModel
    static async create(id,data){
      console.log("Datos recibidos para la validación:", data);
      const result = vWorkHourSchemaZod(data);
      console.log("Resultado de la validación:", result);
      console.log("Resultado de la validación:", result.error);
      console.log("Resultado de la validación:", result.error.issues);
      console.log("Resultado de la validación:", result.error.errors);

      if (!result.success) {
        console.log("Error de validación:", result.error.errors);
        return { message: 'invalid type', error: result.error };
      }
      try {
        const newWorkH = new WorkHour(result.data);
        const employee = await Employee.findById(id);
        newWorkH.employee = employee;
        await newWorkH.save();
        return newWorkH;
      } catch (err) {
        console.log("Error en la creación:", err);
        return { message: err.message };
      }
    }

      export class InfoPaimentModel{
    static async create(cc,{startDate,endDate,startWeek,endWeek}){
        try {
            const newStartDate = new Date(startDate.trim());
            const newEndDate = new Date(endDate.trim());

            const employee = await this.findEmployee(cc);
            if (!employee) {
                return { message: 'employee not found' };
            }

            const allObjectHours = await this.findWorkHours(newStartDate, newEndDate, cc);

            const {
                totalHolidayHours,
                totalNormalHours,
                exHours,
                basicPaiment,
                salary
            } = calcPaiment(allObjectHours);

            const infoPaiment = new InfoPaiment({
                employee,
                week: [startWeek, endWeek],
                horasDominicales: { hours: totalHolidayHours },
                horasDiurnas: { hours: totalNormalHours },
                horasExtras: { hours: exHours },
                sueldoBasico: basicPaiment,
                sueldoTotal: salary
            });

            await infoPaiment.save();
            return infoPaiment;
        } catch (err) {
            return { message: 'error saving payment info', err: err.message };
        }
    }

    static async findEmployee(cc) {
        try {
            return await Employee.findOne({}, { __v: 0 }).populate({
                path: 'profile',
                match: { cc },
                select: "-__v"
            });
        } catch (err) {
            throw new Error(`Error finding employee: ${err.message}`);
        }
    }

    static async findWorkHours(startDate, endDate, cc) {
        try {
            return await WorkHour.find({ date: { $gte: startDate, $lte: endDate } }, { __v: 0 })
                .populate({
                    path: 'holiday',
                    select: '-_id isHoliday hrsHoliday'
                })
                .populate({
                    path: 'employee',
                    select: 'profile area',
                    populate: {
                        path: 'profile',
                        match: { cc },
                        select: 'cc name'
                    }
                })
                .exec();
        } catch (err) {
            throw new Error(`Error finding work hours: ${err.message}`);
        }
    }
    //     try{
    //         const newStartDate = new Date(startDate.trim());
    //         const newEndDate = new Date(endDate.trim()); 

    //         const employee=await Employee.findOne({},{__v:0}).populate({
    //             path:'profile',
    //             match:{'cc':cc},
    //             select:"-__v"
    //         });
    //         if(!employee) {
    //             return {message:'employee dont find'}
    //         }
    //     }catch(err){
    //         return {message:err.message}
    //     }
    //     const allObjectHours=await WorkHour.find({date:{$gte : newStartDate, $lte : newEndDate}
    //     },{__v:0})
    //     .populate({
    //         path: 'holiday',
    //         select: '-_id isHoliday hrsHoliday'
    //     })
    //     .populate({
    //         path:'employee',
    //         select:'profile area',
    //         populate:{
    //             path:'profile',
    //             match:{'cc':cc},
    //             select:'cc name '
    //         }
    //     })
    //     .exec();
    //     try{
    //         const {
    //             totalHolidayHours,
    //             totalNormalHours,
    //             exHours,
    //             basicPaiment,
    //             salary
    //         }   = await calcPaiment(allObjectHours);
        
    //         const infoPaiment=new InfoPaiment({
    //             employee,
    //             week: [startWeek, endWeek],
    //             horasDominicales: {
    //                 hours: totalHolidayHours
    //             },
    //             horasDiurnas: {
    //                 hours: totalNormalHours
    //             },
    //             horasExtras: {
    //                 hours: exHours
    //             },
    //             sueldoBasico: basicPaiment,
    //             sueldoTotal: salary
    //         });
                        
    //         console.log(infoPaiment);
    //         await   infoPaiment.save();
    //         return infoPaiment;
    //     }catch(err){
    //         return {message:'error save',err:err}
    // }
    
  }
  groupBy and more 
//     const [filterData,setFilterData]=useState();

//     useEffect(()=>{
//       try{
//         let dataFilter=data.filter(data=>data.employee.area===area);
//         let groupData=Object.groupBy(dataFilter,(employee)=>{
//             return employee.employee.profile.name
//         })
//         setFilterData(groupData);
//     }catch(err){
          //////////////////this is no accept in fetch 
//         return(
//             <span>Not Found</span>
//         )
//     }
// },[area]);
 
// const hours = (data) => {
//     let result={}
//     Object.keys(data).forEach(key => {
//     const totalHours=data[key].reduce((total,item)=>{
//         return total + (item.dayHour !== undefined ? item.dayHour : 0);

//         },0)
//         result[key]=totalHours
        
//     });
//     console.log(result)
//   }

uso de groupby
      const group = Object.groupBy(filterHours,(hour)=>{
        return `${hour.employee.profile.cc} ${hour.employee.profile.cc}` ;
      })
        console.log(group)
      let result={}
      const totalHours=Object.keys(group).forEach(key=>{
        const totalHours=group[key].reduce((total,item)=>{
          return total + (item.dayHour!= undefined ? item.dayHour : 0 )
        },0)
        
        return result[key]=totalHours
    })

        console.log('result',result)

    //de esta forma se controls como quiero que modifico los datos antes de enviarlos
    const formattedData = {
      ...data,
      holiday: {
        isHoliday: data.isHoliday || false,
        hrsHoliday: data.hrsHoliday || 0,
      },
    };
    console.log("antes de enviar:", formattedData);  
    //el delete es porque el json se envia asi 
    //{...data, 
  //   isHoliday: true, 
  //   hrsHoliday: 8,
  //   holiday: {isHoliday: true, hrsHoliday: 8}
  // } o sea que se repite la información dos veces por eso se hace el delete
    delete formattedData.isHoliday;
    delete formattedData.hrsHoliday;
    console.log("despues:", formattedData);

    const reduce=filterHours.reduce((acc,hora)=>{
        //necesitamos crear la llave para tener una referencia
        const cc=hora.employee.profile.cc
        //como acc no es de ningun tipo hay que crearle
        //manualmente la estructura que tendra 
        if(!acc[cc]){
          acc[cc]={
            cc:0,
            name:'',
            horasTotales:0,
            horasExtras:0,
            data:[]
          }
        }
        
        //logica
        if(!acc[cc].name || !acc[cc].cc ){
          acc[cc].name=hora.employee.profile.name;
          acc[cc].cc=hora.employee.profile.cc;
        }
        acc[cc].horasTotales+=hora.dayHour;
        acc[cc].horasExtras+=hora.holiday.hrsHoliday
        acc[cc].data.push(hora);
        return acc;
      },{})
        const reduce=filterHours.reduce((acc,hora,i)=>{
        let name=hora.employee.profile.name;
        if(!acc[name]){
          acc[name]={
            cc:0,
            name:'',
            lastName:'',
            horasTotales:0,
            minutes:0,
            data:[]
          }
        }
        if(!acc[name].name || !acc[name].cc || !acc[name].lastName){
          acc[name].name=hora.employee.profile.name;
          acc[name].cc=hora.employee.profile.cc;
          acc[name].lastName=hora.employee.profile.lastName;

        }
        acc[name].horasTotales+=hora.dayHour.hours;
        acc[name].minutes+=hora.dayHour.minutes
        acc[name].data.push(hora);
        return acc;
      },{})
      console.log('groups',reduce);
      // {!watch('isHoliday') && (
//   <div className="flex flex-col gap-2">
//     <label htmlFor="dayHour" className="font-medium font-sans">Horas</label>
//     <input type="number" {...register('dayHour', {
//       required: {
//         value: true,
//         message: 'Se necesita el total de horas'
//       },
//       max: {
//         value: 24,
//         message: 'Debe ser menor de 24 horas'
//       },
//       min: {
//         value: 0,
//         message: 'Solo horas mayores a 0'
//       },
//       pattern: {
//         value: /^(0?[0-9]|1[0-2])$/,
//         message: 'Ingrese un número válido del 0 al 12'
//       },valueAsNumber: true
//     })} defaultValue={0} className="border-[1px] rounded-lg p-[2px] border-gray-400" />
//     {errors.dayHour && <span className="text-red-600">{errors.dayHour.message}</span>}
//   </div>
// )}

// {watch('isHoliday') && (
//   <div className="flex flex-col gap-2">
//     <label htmlFor="hrsHoliday" className="font-medium font-sans">Horas festivas</label>
//     <input type="number" {...register('hrsHoliday', {
//       required: {
//         value: true,
//         message: 'Se necesitan las horas festivas'
//       },valueAsNumber: true,
//       max: {
//         value: 24,
//         message: 'Debe ser menor de 24 horas'
//       },
//       min: {
//         value: 0,
//         message: 'Solo horas mayores a 0'
//       },
//       pattern: {
//         value: /^(0?[0-9]|1[0-2])$/,
//         message: 'Ingrese un número válido del 0 al 12'
//       }})}
//       defaultValue={0} className="border-[1px] rounded-lg p-[2px] border-gray-400" />
//     {errors.hrsHoliday && <span className="text-red-600">{errors.hrsHoliday.message}</span>}
//   </div>
// )}

// <div className='flex gap-2'>
// <div className='flex flex-col'>
// <label htmlFor='--' className='font-medium font-sans '>Hora de entrada</label>
//   <input type="datetime-local" {...register('--',{
//   require:{
//     value:true,
//     message:'se requieren horas'
//   }
//   })} defaultChecked='' className="border-[1px] rounded-lg p-[2px] border-gray-400 max-w-[180px]"/>
// </div>
// <div>
// <label htmlFor='--' className='font-medium font-sans '>Hora de salida</label>
//   <input type="datetime-local" {...register('--',{
//   require:{
//     value:true,
//     message:'se requieren horas'
//   }
//   })} defaultChecked='' className="border-[1px] rounded-lg p-[2px] border-gray-400 max-w-[180px]"/>
// </div>
// </div>
    // leavework: { type: String, enum: ['Morning', 'Afternoon', 'Full Day'] },
    // holiday:{
    //     isHoliday: { type: Boolean, default:false },
    //     hrsHoliday: { type: Number, default:0}
    //  }
        // {
    //   type: [{
    //       isHoliday: { type: Boolean },
    //       hrsHoliday: { type: Number }
    //   }], default: function() {
    //     return this.isNew ? null : undefined;
    //   }}
      //es mejor tratar con objetos y no arrays
        // console.log(Object.keys(datos).forEach((key)=>{
  //   //aqui se usa employee para que sea igual a el objeto especificado con [key]
  //   const employee = datos[key];
  // //como es un forEach accede a ese empleado y puede acceder a la informacion
  //   console.log(employee.data.map(result=>{return result.employee.profile.cc}))
  // }))
  const searchFilter = ({ target }) => {
    const dataArray = [];
    //entries da la llave y el valor de cada objeto que tengamos en un array
    //forEach ejecuta por cada objeto que tengamos [{},{}...]
    Object.entries(data).forEach(([key, hours]) => {
      //asignamos una variable para poder guardar los datos filtrados
      const filteredData = hours.data.filter((hora) =>
        //filtramos por nombre
        hora.employee.profile.name
          .toLowerCase()
          .includes(target.value.toLowerCase())
      );

      if (filteredData.length > 0) {
        //hacemos Push para guardar la nueva informacion en un nuevo array dataArray
        dataArray.push({
          //esto es porque hours mantenga toda su informacion y no solo se guarde el array filtrado
          ...hours,
          //en hours el contenido de data se cambia por el nuevo contenido filtrado
          data: filteredData,
        });
      }
    });
    setNameFilter(dataArray);
  };
    const {register,handleSubmit,formState:{errors},watch}=useForm({

    defaultValues: {
      isHoliday: dataResult.holiday.isHoliday,
      hrsHoliday: dataResult.holiday.hrsHoliday,
      dayHour:dataResult.dayHour,
    
    }});

    const onSubmit = handleSubmit((data) => {

      const formattedData = {
        ...data,
        holiday: {
          isHoliday:data.isHoliday || false,
          hrsHoliday:data.hrsHoliday || 0
        } 
      };
      //se accede a los datos isHoliDay de data no de holiday
      delete formattedData.isHoliday;
      delete formattedData.hrsHoliday;
      console.log('Datos enviados:', formattedData);
    });